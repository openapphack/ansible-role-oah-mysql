---
services: docker

env:
  # Test package install on all supported OSes.
  - distro: ubuntu1604
    init: /lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    playbook: test.yml
    oah_namespace: openapphack

  # Only test source install on latest supported OSes.
  - distro: ubuntu1604
    init: /lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    playbook: test-source.yml
    oah_namespace: openapphack

before_install:
  # Pull container.
  - 'docker pull ${oah_namespace}/oah-docker-${distro}-ansible:latest'

script:
  - container_id=$(mktemp)
  # Run container in detached state.
  - 'docker run --detach --volume="${PWD}":/etc/ansible/roles/role_under_test:ro ${run_opts} ${oah_namespace}/oah-docker-${distro}-ansible:latest "${init}" > "${container_id}"'

  # Install dependencies.
  - 'docker exec "$(cat ${container_id})" ansible-galaxy install -r /etc/ansible/roles/role_under_test/tests/requirements.yml'

  # Ansible syntax check.
  - 'docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/role_under_test/tests/${playbook} --syntax-check'

  # Test role.
  - 'docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/role_under_test/tests/${playbook}'

  # Test role idempotence.
  - idempotence=$(mktemp)
  - docker exec "$(cat ${container_id})" ansible-playbook /etc/ansible/roles/role_under_test/tests/${playbook} | tee -a ${idempotence}
  - >
    tail ${idempotence}
    | grep -q 'changed=0.*failed=0'
    && (echo 'Idempotence test: pass' && exit 0)
    || (echo 'Idempotence test: fail' && exit 1)

    # Some MySQL debugging (show all the logs).
    - docker exec --tty "$(cat ${container_id})" env TERM=xterm ls -lah /var/log
    - docker exec --tty "$(cat ${container_id})" env TERM=xterm cat /var/log/mysql/error.log || true
    - docker exec --tty "$(cat ${container_id})" env TERM=xterm cat /var/log/mysql.err || true

    # Check to make sure we can connect to MySQL via Unix socket.
    - >
      sudo docker exec "$(cat ${container_id})" mysql -u root -proot -e 'show databases;'
      | grep -q 'information_schema'
      && (echo 'MySQL running normally' && exit 0)
      || (echo 'MySQL not running' && exit 1)

    # Check to make sure we can connect to MySQL via TCP.
    - >
      sudo docker exec "$(cat ${container_id})" mysql -u root -proot -h 127.0.0.1 -e 'show databases;'
      | grep -q 'information_schema'
      && (echo 'MySQL running normally' && exit 0)
      || (echo 'MySQL not running' && exit 1)

  after_failure:
    # Check MySQL settings.
    - 'docker exec --tty "$(cat ${container_id})" env TERM=xterm cat /var/log/mysql/error.log'
    - 'docker exec --tty "$(cat ${container_id})" env TERM=xterm cat /var/log/mysql.err'
    - 'docker exec --tty "$(cat ${container_id})" env TERM=xterm cat /var/log/mysql.log'

    # Clean up
    - 'sudo docker stop "$(cat ${container_id})"'

notifications:
  webhooks: https://galaxy.ansible.com/api/v1/notifications/
